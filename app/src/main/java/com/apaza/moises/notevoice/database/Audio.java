package com.apaza.moises.notevoice.database;

import com.apaza.moises.notevoice.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "AUDIO".
 */
public class Audio {

    private Long id;
    private String code;
    private String route;
    private Integer duration;
    private java.util.Date createAt;
    private Long idNote;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AudioDao myDao;

    private Audio audio;
    private Long audio__resolvedKey;


    public Audio() {
    }

    public Audio(Long id) {
        this.id = id;
    }

    public Audio(Long id, String code, String route, Integer duration, java.util.Date createAt, Long idNote) {
        this.id = id;
        this.code = code;
        this.route = route;
        this.duration = duration;
        this.createAt = createAt;
        this.idNote = idNote;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAudioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getRoute() {
        return route;
    }

    public void setRoute(String route) {
        this.route = route;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public java.util.Date getCreateAt() {
        return createAt;
    }

    public void setCreateAt(java.util.Date createAt) {
        this.createAt = createAt;
    }

    public Long getIdNote() {
        return idNote;
    }

    public void setIdNote(Long idNote) {
        this.idNote = idNote;
    }

    /** To-one relationship, resolved on first access. */
    public Audio getAudio() {
        Long __key = this.idNote;
        if (audio__resolvedKey == null || !audio__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AudioDao targetDao = daoSession.getAudioDao();
            Audio audioNew = targetDao.load(__key);
            synchronized (this) {
                audio = audioNew;
            	audio__resolvedKey = __key;
            }
        }
        return audio;
    }

    public void setAudio(Audio audio) {
        synchronized (this) {
            this.audio = audio;
            idNote = audio == null ? null : audio.getId();
            audio__resolvedKey = idNote;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
