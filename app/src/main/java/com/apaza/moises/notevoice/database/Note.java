package com.apaza.moises.notevoice.database;

import java.util.List;
import com.apaza.moises.notevoice.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTE".
 */
public class Note {

    private Long id;
    private String code;
    private String color;
    private java.util.Date createAt;
    private java.util.Date updateAt;
    private Long idAlarm;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;

    private Alarm alarm;
    private Long alarm__resolvedKey;

    private List<Image> NoteImage;
    private List<Audio> NoteAudio;
    private List<Message> NoteMessage;

    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String code, String color, java.util.Date createAt, java.util.Date updateAt, Long idAlarm) {
        this.id = id;
        this.code = code;
        this.color = color;
        this.createAt = createAt;
        this.updateAt = updateAt;
        this.idAlarm = idAlarm;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public java.util.Date getCreateAt() {
        return createAt;
    }

    public void setCreateAt(java.util.Date createAt) {
        this.createAt = createAt;
    }

    public java.util.Date getUpdateAt() {
        return updateAt;
    }

    public void setUpdateAt(java.util.Date updateAt) {
        this.updateAt = updateAt;
    }

    public Long getIdAlarm() {
        return idAlarm;
    }

    public void setIdAlarm(Long idAlarm) {
        this.idAlarm = idAlarm;
    }

    /** To-one relationship, resolved on first access. */
    public Alarm getAlarm() {
        Long __key = this.idAlarm;
        if (alarm__resolvedKey == null || !alarm__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlarmDao targetDao = daoSession.getAlarmDao();
            Alarm alarmNew = targetDao.load(__key);
            synchronized (this) {
                alarm = alarmNew;
            	alarm__resolvedKey = __key;
            }
        }
        return alarm;
    }

    public void setAlarm(Alarm alarm) {
        synchronized (this) {
            this.alarm = alarm;
            idAlarm = alarm == null ? null : alarm.getId();
            alarm__resolvedKey = idAlarm;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Image> getNoteImage() {
        if (NoteImage == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageDao targetDao = daoSession.getImageDao();
            List<Image> NoteImageNew = targetDao._queryNote_NoteImage(id);
            synchronized (this) {
                if(NoteImage == null) {
                    NoteImage = NoteImageNew;
                }
            }
        }
        return NoteImage;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteImage() {
        NoteImage = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Audio> getNoteAudio() {
        if (NoteAudio == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AudioDao targetDao = daoSession.getAudioDao();
            List<Audio> NoteAudioNew = targetDao._queryNote_NoteAudio(id);
            synchronized (this) {
                if(NoteAudio == null) {
                    NoteAudio = NoteAudioNew;
                }
            }
        }
        return NoteAudio;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteAudio() {
        NoteAudio = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getNoteMessage() {
        if (NoteMessage == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> NoteMessageNew = targetDao._queryNote_NoteMessage(id);
            synchronized (this) {
                if(NoteMessage == null) {
                    NoteMessage = NoteMessageNew;
                }
            }
        }
        return NoteMessage;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteMessage() {
        NoteMessage = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
